import pandas as pd
import numpy as np
import logging
import re

from matplotlib.colors import ListedColormap
from .gauss import fit_gaussian_2D


__all__ = ['fit_features_in_stack',
           'natural_sort',
           'bboxes_overlap',
           'is_notebook',
           'get_Daans_special_cmap']


def fit_features_in_stack(stack, features, width=None):
    """Fit 2D gaussian to each slice in stack. XY positions
    defined in df.x and df.y.

    Parameters
    ----------
    stack : array-like or list of filenames
        Image stack of shape (L, M, N), L can be 0
    features : `pd.DataFrame`
        Feature set returned from `trackpy.locate`
    width : scalar
        Dimensions of bounding boxes

    Returns
    -------
    fit_features : `pd.DataFrame`
        DataFrame of resulting fit parameters for
        each feature defined in 'pd.DataFrame' features
        
    Notes
    -----
    ...
    """
    if stack.ndim == 2: stack = [stack]
    
    # define cutout for each feature
    if width is None:
        width = 10 * features['size'].mean()
    df_bboxes = features.loc[:, ['x', 'y']]
    df_bboxes['x_min'] = features['x'] - width/2
    df_bboxes['y_min'] = features['y'] - width/2
    df_bboxes['x_max'] = features['x'] + width/2
    df_bboxes['y_max'] = features['y'] + width/2

    fit_results = []
    # iterate through stack
    for i, zslice in enumerate(stack):
        fit_results.append([])
        logging.info(f"Fitting slice ({i+1}/{len(stack)})")
        # for each zslice and each bead fit feature with 2D Gauss
        for j, row in df_bboxes.iterrows():
            x1, x2, y1, y2 = [int(p) for p in [row.x_min, row.x_max, 
                                               row.y_min, row.y_max]]
            feature_image = zslice[y1:y2, x1:x2]
            try:
                popt = fit_gaussian_2D(feature_image)
                fit_results[i].append(popt)
            except:
                fit_results[i].append(6*[np.nan])

    fr = np.array(fit_results)
    fit_features = pd.DataFrame()
    for i in range(fr.shape[1]):
        bead_df = (pd.DataFrame(fr[:, i, :], 
                                columns=["x", "y", "sx", "sy", "A", "B"])
                                .add_suffix(f"_{i}"))
        fit_features = pd.concat([fit_features, bead_df], axis=1)
    return fit_features


def natural_sort(l):
    """A more natural sorting algorithm

    Parameters
    ----------
    l : list
        List of strings in need of sorting

    Examples
    --------
    >>> l = ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']
    >>> sorted(l)
    ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
    >>> natural_sort(l)
    ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']

    References
    ----------
    [1] https://stackoverflow.com/a/4836734/5285918
    """
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]
    return sorted(l, key=alphanum_key)


def bboxes_overlap(bbox_1, bbox_2):
    """Determines if two bounding boxes overlap or coincide

    Parameters
    ----------
    bbox_1 : array-like (or 4-tuple)
        1st bounding box
        convention: (x_min, y_min, x_max, y_max)
    bbox_2 : array-like (or 4-tuple)
        2nd bounding box
        convention: (x_min, y_min, x_max, y_max)

    Returns
    -------
    overlap : bool
        True if bounding boxes overlap / coincide
        False otherwise

    References
    ----------
    [1] https://stackoverflow.com/a/20925869/5285918
    """
    # 2 tiles overlap iff their projections onto both x and y axis overlap
    # Overlap in 1D iff box1_max > box2_min AND box1_min < box2_max
    overlap = ((bbox_1[2] >= bbox_2[0]) & (bbox_1[0] <= bbox_2[2])) & \
              ((bbox_1[3] >= bbox_2[1]) & (bbox_1[1] <= bbox_2[3]))
    return overlap


def is_notebook():
    """Attempts to determines whether code is being exectued in a notebook or not
    
    References
    ----------
    [1] https://stackoverflow.com/a/39662359/5285918
    """
    try:
        shell = get_ipython().__class__.__name__
        if shell == 'ZMQInteractiveShell':
            return True   # Jupyter notebook or qtconsole
        elif shell == 'TerminalInteractiveShell':
            return False  # Terminal running IPython
        else:
            return False  # Other type (?)
    except NameError:
        return False      # Probably standard Python interpreter


def get_Daans_special_cmap():
    """Equivalent to FIRE LUT in ImageJ/FIJI"""
    # Black --> purplish --> red --> orange --> yellow --> white
    colors = [
        [0.        , 0.        , 0.        , 1.        ],
        [0.        , 0.        , 0.02745098, 1.        ],
        [0.        , 0.        , 0.05882353, 1.        ],
        [0.        , 0.        , 0.08627451, 1.        ],
        [0.        , 0.        , 0.11764706, 1.        ],
        [0.        , 0.        , 0.14901961, 1.        ],
        [0.        , 0.        , 0.17647059, 1.        ],
        [0.        , 0.        , 0.20784314, 1.        ],
        [0.        , 0.        , 0.23921569, 1.        ],
        [0.        , 0.        , 0.25490196, 1.        ],
        [0.        , 0.        , 0.27058824, 1.        ],
        [0.        , 0.        , 0.29019608, 1.        ],
        [0.        , 0.        , 0.30588235, 1.        ],
        [0.        , 0.        , 0.32156863, 1.        ],
        [0.        , 0.        , 0.34117647, 1.        ],
        [0.        , 0.        , 0.35686275, 1.        ],
        [0.00392157, 0.        , 0.37647059, 1.        ],
        [0.01568627, 0.        , 0.39215686, 1.        ],
        [0.02745098, 0.        , 0.40784314, 1.        ],
        [0.03921569, 0.        , 0.42352941, 1.        ],
        [0.05098039, 0.        , 0.44313725, 1.        ],
        [0.0627451 , 0.        , 0.45882353, 1.        ],
        [0.0745098 , 0.        , 0.4745098 , 1.        ],
        [0.08627451, 0.        , 0.49019608, 1.        ],
        [0.09803922, 0.        , 0.50980392, 1.        ],
        [0.10980392, 0.        , 0.5254902 , 1.        ],
        [0.12156863, 0.        , 0.54117647, 1.        ],
        [0.13333333, 0.        , 0.56078431, 1.        ],
        [0.14509804, 0.        , 0.57647059, 1.        ],
        [0.15686275, 0.        , 0.59215686, 1.        ],
        [0.16862745, 0.        , 0.61176471, 1.        ],
        [0.18039216, 0.        , 0.62745098, 1.        ],
        [0.19215686, 0.        , 0.64705882, 1.        ],
        [0.20392157, 0.        , 0.65882353, 1.        ],
        [0.21568627, 0.        , 0.67058824, 1.        ],
        [0.22745098, 0.        , 0.68627451, 1.        ],
        [0.23921569, 0.        , 0.69803922, 1.        ],
        [0.25098039, 0.        , 0.70980392, 1.        ],
        [0.2627451 , 0.        , 0.7254902 , 1.        ],
        [0.2745098 , 0.        , 0.7372549 , 1.        ],
        [0.28627451, 0.        , 0.75294118, 1.        ],
        [0.29803922, 0.        , 0.76470588, 1.        ],
        [0.30980392, 0.        , 0.78039216, 1.        ],
        [0.32156863, 0.        , 0.79215686, 1.        ],
        [0.33333333, 0.        , 0.80784314, 1.        ],
        [0.34509804, 0.        , 0.81960784, 1.        ],
        [0.35686275, 0.        , 0.83529412, 1.        ],
        [0.36862745, 0.        , 0.84705882, 1.        ],
        [0.38431373, 0.        , 0.8627451 , 1.        ],
        [0.39607843, 0.        , 0.8627451 , 1.        ],
        [0.40784314, 0.        , 0.86666667, 1.        ],
        [0.41960784, 0.        , 0.87058824, 1.        ],
        [0.43137255, 0.        , 0.8745098 , 1.        ],
        [0.44313725, 0.        , 0.87843137, 1.        ],
        [0.45490196, 0.        , 0.88235294, 1.        ],
        [0.46666667, 0.        , 0.88627451, 1.        ],
        [0.47843137, 0.        , 0.89019608, 1.        ],
        [0.49019608, 0.        , 0.87843137, 1.        ],
        [0.50196078, 0.        , 0.87058824, 1.        ],
        [0.51372549, 0.        , 0.8627451 , 1.        ],
        [0.5254902 , 0.        , 0.85490196, 1.        ],
        [0.5372549 , 0.        , 0.84705882, 1.        ],
        [0.54901961, 0.        , 0.83921569, 1.        ],
        [0.56078431, 0.        , 0.83137255, 1.        ],
        [0.57254902, 0.        , 0.82352941, 1.        ],
        [0.58039216, 0.        , 0.80784314, 1.        ],
        [0.58823529, 0.        , 0.79215686, 1.        ],
        [0.59607843, 0.        , 0.78039216, 1.        ],
        [0.60392157, 0.        , 0.76470588, 1.        ],
        [0.61176471, 0.        , 0.74901961, 1.        ],
        [0.61960784, 0.        , 0.7372549 , 1.        ],
        [0.62745098, 0.        , 0.72156863, 1.        ],
        [0.63529412, 0.        , 0.70980392, 1.        ],
        [0.63921569, 0.        , 0.69411765, 1.        ],
        [0.64313725, 0.        , 0.67843137, 1.        ],
        [0.65098039, 0.        , 0.6627451 , 1.        ],
        [0.65490196, 0.        , 0.65098039, 1.        ],
        [0.65882353, 0.        , 0.63529412, 1.        ],
        [0.66666667, 0.        , 0.61960784, 1.        ],
        [0.67058824, 0.        , 0.60392157, 1.        ],
        [0.67843137, 0.        , 0.59215686, 1.        ],
        [0.68235294, 0.        , 0.57647059, 1.        ],
        [0.68627451, 0.        , 0.56078431, 1.        ],
        [0.69411765, 0.        , 0.54901961, 1.        ],
        [0.69803922, 0.        , 0.53333333, 1.        ],
        [0.70196078, 0.        , 0.51764706, 1.        ],
        [0.70980392, 0.        , 0.50588235, 1.        ],
        [0.71372549, 0.        , 0.49019608, 1.        ],
        [0.72156863, 0.        , 0.47843137, 1.        ],
        [0.7254902 , 0.        , 0.4627451 , 1.        ],
        [0.72941176, 0.        , 0.44705882, 1.        ],
        [0.7372549 , 0.        , 0.43529412, 1.        ],
        [0.74117647, 0.        , 0.41960784, 1.        ],
        [0.74509804, 0.        , 0.40392157, 1.        ],
        [0.75294118, 0.        , 0.39215686, 1.        ],
        [0.75686275, 0.        , 0.37647059, 1.        ],
        [0.76470588, 0.        , 0.36470588, 1.        ],
        [0.76862745, 0.00392157, 0.34901961, 1.        ],
        [0.77647059, 0.01176471, 0.33333333, 1.        ],
        [0.78039216, 0.01960784, 0.32156863, 1.        ],
        [0.78823529, 0.02745098, 0.30588235, 1.        ],
        [0.79215686, 0.03137255, 0.29019608, 1.        ],
        [0.8       , 0.03921569, 0.27843137, 1.        ],
        [0.80392157, 0.04705882, 0.2627451 , 1.        ],
        [0.81176471, 0.05490196, 0.25098039, 1.        ],
        [0.81568627, 0.0627451 , 0.23529412, 1.        ],
        [0.81960784, 0.0745098 , 0.21960784, 1.        ],
        [0.82352941, 0.08235294, 0.20784314, 1.        ],
        [0.83137255, 0.09411765, 0.19215686, 1.        ],
        [0.83529412, 0.10588235, 0.17647059, 1.        ],
        [0.83921569, 0.11372549, 0.16470588, 1.        ],
        [0.84313725, 0.1254902 , 0.14901961, 1.        ],
        [0.85098039, 0.1372549 , 0.1372549 , 1.        ],
        [0.85490196, 0.14509804, 0.12156863, 1.        ],
        [0.8627451 , 0.15686275, 0.10588235, 1.        ],
        [0.86666667, 0.16862745, 0.09019608, 1.        ],
        [0.8745098 , 0.18039216, 0.07843137, 1.        ],
        [0.87843137, 0.18823529, 0.0627451 , 1.        ],
        [0.88627451, 0.2       , 0.04705882, 1.        ],
        [0.89019608, 0.21176471, 0.03137255, 1.        ],
        [0.89803922, 0.22352941, 0.01960784, 1.        ],
        [0.90196078, 0.23137255, 0.01568627, 1.        ],
        [0.90588235, 0.24313725, 0.01176471, 1.        ],
        [0.91372549, 0.25490196, 0.01176471, 1.        ],
        [0.91764706, 0.26666667, 0.00784314, 1.        ],
        [0.92156863, 0.2745098 , 0.00392157, 1.        ],
        [0.92941176, 0.28627451, 0.00392157, 1.        ],
        [0.93333333, 0.29803922, 0.        , 1.        ],
        [0.94117647, 0.30980392, 0.        , 1.        ],
        [0.94509804, 0.31764706, 0.        , 1.        ],
        [0.95294118, 0.32941176, 0.        , 1.        ],
        [0.95686275, 0.34117647, 0.        , 1.        ],
        [0.96470588, 0.35294118, 0.        , 1.        ],
        [0.96862745, 0.36078431, 0.        , 1.        ],
        [0.97647059, 0.37254902, 0.        , 1.        ],
        [0.98039216, 0.38431373, 0.        , 1.        ],
        [0.98823529, 0.39607843, 0.        , 1.        ],
        [0.98823529, 0.40392157, 0.        , 1.        ],
        [0.98823529, 0.41176471, 0.        , 1.        ],
        [0.99215686, 0.41960784, 0.        , 1.        ],
        [0.99215686, 0.42745098, 0.        , 1.        ],
        [0.99215686, 0.43529412, 0.        , 1.        ],
        [0.99607843, 0.44313725, 0.        , 1.        ],
        [0.99607843, 0.45098039, 0.        , 1.        ],
        [1.        , 0.45882353, 0.        , 1.        ],
        [1.        , 0.46666667, 0.        , 1.        ],
        [1.        , 0.4745098 , 0.        , 1.        ],
        [1.        , 0.48235294, 0.        , 1.        ],
        [1.        , 0.49019608, 0.        , 1.        ],
        [1.        , 0.49803922, 0.        , 1.        ],
        [1.        , 0.50588235, 0.        , 1.        ],
        [1.        , 0.51372549, 0.        , 1.        ],
        [1.        , 0.52156863, 0.        , 1.        ],
        [1.        , 0.5254902 , 0.        , 1.        ],
        [1.        , 0.53333333, 0.        , 1.        ],
        [1.        , 0.54117647, 0.        , 1.        ],
        [1.        , 0.54901961, 0.        , 1.        ],
        [1.        , 0.55294118, 0.        , 1.        ],
        [1.        , 0.56078431, 0.        , 1.        ],
        [1.        , 0.56862745, 0.        , 1.        ],
        [1.        , 0.57647059, 0.        , 1.        ],
        [1.        , 0.58039216, 0.        , 1.        ],
        [1.        , 0.58823529, 0.        , 1.        ],
        [1.        , 0.59607843, 0.        , 1.        ],
        [1.        , 0.60392157, 0.        , 1.        ],
        [1.        , 0.60784314, 0.        , 1.        ],
        [1.        , 0.61568627, 0.        , 1.        ],
        [1.        , 0.62352941, 0.        , 1.        ],
        [1.        , 0.63137255, 0.        , 1.        ],
        [1.        , 0.63529412, 0.        , 1.        ],
        [1.        , 0.64313725, 0.        , 1.        ],
        [1.        , 0.65098039, 0.        , 1.        ],
        [1.        , 0.65882353, 0.        , 1.        ],
        [1.        , 0.6627451 , 0.        , 1.        ],
        [1.        , 0.67058824, 0.        , 1.        ],
        [1.        , 0.67843137, 0.        , 1.        ],
        [1.        , 0.68627451, 0.        , 1.        ],
        [1.        , 0.69019608, 0.        , 1.        ],
        [1.        , 0.69803922, 0.        , 1.        ],
        [1.        , 0.70588235, 0.        , 1.        ],
        [1.        , 0.71372549, 0.        , 1.        ],
        [1.        , 0.72156863, 0.        , 1.        ],
        [1.        , 0.72941176, 0.        , 1.        ],
        [1.        , 0.7372549 , 0.        , 1.        ],
        [1.        , 0.74509804, 0.        , 1.        ],
        [1.        , 0.74901961, 0.        , 1.        ],
        [1.        , 0.75686275, 0.        , 1.        ],
        [1.        , 0.76470588, 0.        , 1.        ],
        [1.        , 0.77254902, 0.        , 1.        ],
        [1.        , 0.78039216, 0.        , 1.        ],
        [1.        , 0.78823529, 0.        , 1.        ],
        [1.        , 0.79607843, 0.        , 1.        ],
        [1.        , 0.80392157, 0.        , 1.        ],
        [1.        , 0.80784314, 0.        , 1.        ],
        [1.        , 0.81568627, 0.        , 1.        ],
        [1.        , 0.82352941, 0.        , 1.        ],
        [1.        , 0.83137255, 0.        , 1.        ],
        [1.        , 0.83529412, 0.        , 1.        ],
        [1.        , 0.84313725, 0.        , 1.        ],
        [1.        , 0.85098039, 0.        , 1.        ],
        [1.        , 0.85882353, 0.        , 1.        ],
        [1.        , 0.8627451 , 0.        , 1.        ],
        [1.        , 0.87058824, 0.        , 1.        ],
        [1.        , 0.87843137, 0.        , 1.        ],
        [1.        , 0.88627451, 0.        , 1.        ],
        [1.        , 0.89411765, 0.        , 1.        ],
        [1.        , 0.90196078, 0.        , 1.        ],
        [1.        , 0.90980392, 0.        , 1.        ],
        [1.        , 0.91764706, 0.        , 1.        ],
        [1.        , 0.92156863, 0.01568627, 1.        ],
        [1.        , 0.92941176, 0.03137255, 1.        ],
        [1.        , 0.9372549 , 0.05098039, 1.        ],
        [1.        , 0.94509804, 0.06666667, 1.        ],
        [1.        , 0.94901961, 0.08235294, 1.        ],
        [1.        , 0.95686275, 0.10196078, 1.        ],
        [1.        , 0.96470588, 0.11764706, 1.        ],
        [1.        , 0.97254902, 0.1372549 , 1.        ],
        [1.        , 0.97254902, 0.16470588, 1.        ],
        [1.        , 0.97647059, 0.19607843, 1.        ],
        [1.        , 0.98039216, 0.22745098, 1.        ],
        [1.        , 0.98431373, 0.25882353, 1.        ],
        [1.        , 0.98823529, 0.29019608, 1.        ],
        [1.        , 0.99215686, 0.32156863, 1.        ],
        [1.        , 0.99607843, 0.35294118, 1.        ],
        [1.        , 1.        , 0.38431373, 1.        ],
        [1.        , 1.        , 0.41176471, 1.        ],
        [1.        , 1.        , 0.44313725, 1.        ],
        [1.        , 1.        , 0.4745098 , 1.        ],
        [1.        , 1.        , 0.50588235, 1.        ],
        [1.        , 1.        , 0.53333333, 1.        ],
        [1.        , 1.        , 0.56470588, 1.        ],
        [1.        , 1.        , 0.59607843, 1.        ],
        [1.        , 1.        , 0.62745098, 1.        ],
        [1.        , 1.        , 0.65490196, 1.        ],
        [1.        , 1.        , 0.68627451, 1.        ],
        [1.        , 1.        , 0.71764706, 1.        ],
        [1.        , 1.        , 0.74901961, 1.        ],
        [1.        , 1.        , 0.78039216, 1.        ],
        [1.        , 1.        , 0.81176471, 1.        ],
        [1.        , 1.        , 0.84313725, 1.        ],
        [1.        , 1.        , 0.8745098 , 1.        ],
        [1.        , 1.        , 0.89019608, 1.        ],
        [1.        , 1.        , 0.90588235, 1.        ],
        [1.        , 1.        , 0.92156863, 1.        ],
        [1.        , 1.        , 0.9372549 , 1.        ],
        [1.        , 1.        , 0.95294118, 1.        ],
        [1.        , 1.        , 0.96862745, 1.        ],
        [1.        , 1.        , 0.98431373, 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ],
        [1.        , 1.        , 1.        , 1.        ]
    ]
    # Create colormap
    cmap = ListedColormap(colors, name='fire')
    return cmap
